name: Build and Release

on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  build:
    name: Build ConnectDev
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: linux-x86_64
          - os: windows-latest
            asset_name: windows.exe
          - os: macos-latest
            asset_name: macos-x86_64
            target: x86_64
          - os: macos-latest
            asset_name: macos-arm64
            target: arm64
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install build twine pyinstaller

    - name: Run Tests
      run: pytest test/

    - name: Build Executable
      run: |
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          # macOS 特定的构建命令
          if [ "${{ matrix.target }}" == "arm64" ]; then
            pyinstaller --target-arch arm64 connectdev.spec
          else
            pyinstaller --target-arch x86_64 connectdev.spec
          fi
        else
          # 其他平台的构建命令
          pyinstaller connectdev.spec
        fi
      shell: bash

    # Windows 系统生成校验和
    - name: Generate checksum (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        cd dist
        $hash = Get-FileHash -Path connectdev.exe -Algorithm SHA256
        $hash.Hash > connectdev-${{ matrix.asset_name }}.sha256

    # Unix 系统生成校验和
    - name: Generate checksum (Unix)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        cd dist
        shasum -a 256 connectdev > connectdev-${{ matrix.asset_name }}.sha256

    - name: Package
      shell: bash
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          7z a connectdev-${{ matrix.asset_name }}.zip ./dist/connectdev.exe
        else
          tar -czf connectdev-${{ matrix.asset_name }}.tar.gz -C dist connectdev
        fi

    - name: Upload Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./connectdev-${{ matrix.asset_name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_name: connectdev-${{ matrix.asset_name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}

    - name: Upload Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/connectdev-${{ matrix.asset_name }}.sha256
        asset_name: connectdev-${{ matrix.asset_name }}.sha256
        asset_content_type: text/plain

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build package
        run: python -m build
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/*
